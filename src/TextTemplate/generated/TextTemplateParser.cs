//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TextTemplateParser.G4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class TextTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SLASH_STAR=1, COMMENT_LINE=2, COMMENT_SKIP=3, CONTINUATION=4, BULLET=5, 
		TEXT=6, LBRACE=7, SPACES=8, NL=9, SUBTEMPLATES=10, BRACED_SLASH_STAR=11, 
		BRACED_COMMENT=12, IDENTIFIER=13, METHODNAME=14, DOT=15, ARROW=16, RELATIONAL=17, 
		THINARROW=18, RBRACE=19, WS=20, LP=21, COLON=22, LBRACKET=23, AND=24, 
		OR=25, NOT=26, POUND=27, MINUS=28, DIGITS=29, BRACED_ILLEGAL=30, PARENED_SLASH_STAR=31, 
		REGEX=32, PARENED_COMMENT=33, PARENED_WS=34, RP=35, QUOTE=36, APOSTROPHE=37, 
		COMMA=38, PARENED_ILLEGAL=39, QUOTED_BAD_BACKSLASH=40, BAD_BACKSLASH=41, 
		BRACKETED_SLASH_STAR=42, BRACKETED_COMMENT_LINE=43, BRACKETED_COMMENT_SKIP=44, 
		RBRACKETLP=45, RBRACKET=46, NESTED_SLASH_STAR=47, NESTED_COMMENT5=48, 
		NESTED_WS=49, NESTED_QUOTE=50, NESTED_APOSTROPHE=51, NESTED_ILLEGAL=52, 
		TICK=53, E_RBRACE=54, TEXT_SLASH=55, BRACED_RP=56, BRACED_COMMA=57, ESCAPED_APOSTROPHE=58, 
		ESCAPED_SLASH=59;
	public const int
		RULE_compilationUnit = 0, RULE_subtemplateSection = 1, RULE_subtemplateSpecs = 2, 
		RULE_subtemplateSpec = 3, RULE_templateContents = 4, RULE_bullet = 5, 
		RULE_beginningBullet = 6, RULE_text = 7, RULE_continuation = 8, RULE_templateToken = 9, 
		RULE_bracedOptions = 10, RULE_methodInvoked = 11, RULE_predicateExpression = 12, 
		RULE_relationalOperand = 13, RULE_digits = 14, RULE_quoteOperand = 15, 
		RULE_apostropheOperand = 16, RULE_identifierOperand = 17, RULE_identifierCondition = 18, 
		RULE_templateContextCommaToken = 19, RULE_templateContextToken = 20, RULE_contextToken = 21, 
		RULE_templateSpec = 22, RULE_bracketedTemplateSpec = 23, RULE_invokedTemplateSpec = 24, 
		RULE_bracedArrow = 25, RULE_bracedThinArrow = 26, RULE_bracedArrowTemplateSpec = 27, 
		RULE_methodable = 28, RULE_methodInvocation = 29, RULE_method = 30, RULE_arguments = 31, 
		RULE_optionallyInvoked = 32, RULE_argument = 33, RULE_namedSubtemplate = 34;
	public static readonly string[] ruleNames = {
		"compilationUnit", "subtemplateSection", "subtemplateSpecs", "subtemplateSpec", 
		"templateContents", "bullet", "beginningBullet", "text", "continuation", 
		"templateToken", "bracedOptions", "methodInvoked", "predicateExpression", 
		"relationalOperand", "digits", "quoteOperand", "apostropheOperand", "identifierOperand", 
		"identifierCondition", "templateContextCommaToken", "templateContextToken", 
		"contextToken", "templateSpec", "bracketedTemplateSpec", "invokedTemplateSpec", 
		"bracedArrow", "bracedThinArrow", "bracedArrowTemplateSpec", "methodable", 
		"methodInvocation", "method", "arguments", "optionallyInvoked", "argument", 
		"namedSubtemplate"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'{'", null, null, null, null, 
		null, null, null, null, "'=>'", null, "'->'", null, null, "'('", "':'", 
		"'['", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'\\'", null, null, null, "']('", 
		"']'", null, null, null, null, null, null, null, null, null, null, null, 
		"'\\''", "'\\\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SLASH_STAR", "COMMENT_LINE", "COMMENT_SKIP", "CONTINUATION", "BULLET", 
		"TEXT", "LBRACE", "SPACES", "NL", "SUBTEMPLATES", "BRACED_SLASH_STAR", 
		"BRACED_COMMENT", "IDENTIFIER", "METHODNAME", "DOT", "ARROW", "RELATIONAL", 
		"THINARROW", "RBRACE", "WS", "LP", "COLON", "LBRACKET", "AND", "OR", "NOT", 
		"POUND", "MINUS", "DIGITS", "BRACED_ILLEGAL", "PARENED_SLASH_STAR", "REGEX", 
		"PARENED_COMMENT", "PARENED_WS", "RP", "QUOTE", "APOSTROPHE", "COMMA", 
		"PARENED_ILLEGAL", "QUOTED_BAD_BACKSLASH", "BAD_BACKSLASH", "BRACKETED_SLASH_STAR", 
		"BRACKETED_COMMENT_LINE", "BRACKETED_COMMENT_SKIP", "RBRACKETLP", "RBRACKET", 
		"NESTED_SLASH_STAR", "NESTED_COMMENT5", "NESTED_WS", "NESTED_QUOTE", "NESTED_APOSTROPHE", 
		"NESTED_ILLEGAL", "TICK", "E_RBRACE", "TEXT_SLASH", "BRACED_RP", "BRACED_COMMA", 
		"ESCAPED_APOSTROPHE", "ESCAPED_SLASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TextTemplateParser.G4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TextTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TextTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TextTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TextTemplateParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BeginningBulletContext beginningBullet() {
			return GetRuleContext<BeginningBulletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentsContext[] templateContents() {
			return GetRuleContexts<TemplateContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentsContext templateContents(int i) {
			return GetRuleContext<TemplateContentsContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 70; beginningBullet();
				}
				break;
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 73; templateContents();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUATION) | (1L << BULLET) | (1L << TEXT) | (1L << LBRACE) | (1L << SPACES) | (1L << NL) | (1L << SUBTEMPLATES))) != 0) );
			State = 78; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtemplateSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTEMPLATES() { return GetToken(TextTemplateParser.SUBTEMPLATES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubtemplateSpecsContext subtemplateSpecs() {
			return GetRuleContext<SubtemplateSpecsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public SubtemplateSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtemplateSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterSubtemplateSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitSubtemplateSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtemplateSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtemplateSectionContext subtemplateSection() {
		SubtemplateSectionContext _localctx = new SubtemplateSectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_subtemplateSection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(SUBTEMPLATES);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 81; text();
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 87; subtemplateSpecs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtemplateSpecsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubtemplateSpecContext[] subtemplateSpec() {
			return GetRuleContexts<SubtemplateSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtemplateSpecContext subtemplateSpec(int i) {
			return GetRuleContext<SubtemplateSpecContext>(i);
		}
		public SubtemplateSpecsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtemplateSpecs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterSubtemplateSpecs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitSubtemplateSpecs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtemplateSpecs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtemplateSpecsContext subtemplateSpecs() {
		SubtemplateSpecsContext _localctx = new SubtemplateSpecsContext(Context, State);
		EnterRule(_localctx, 4, RULE_subtemplateSpecs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 89; subtemplateSpec();
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtemplateSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContextTokenContext templateContextToken() {
			return GetRuleContext<TemplateContextTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public SubtemplateSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtemplateSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterSubtemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitSubtemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtemplateSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtemplateSpecContext subtemplateSpec() {
		SubtemplateSpecContext _localctx = new SubtemplateSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_subtemplateSpec);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; templateContextToken();
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 96; text();
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubtemplateSectionContext subtemplateSection() {
			return GetRuleContext<SubtemplateSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BulletContext bullet() {
			return GetRuleContext<BulletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateTokenContext templateToken() {
			return GetRuleContext<TemplateTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContextCommaTokenContext templateContextCommaToken() {
			return GetRuleContext<TemplateContextCommaTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContextTokenContext templateContextToken() {
			return GetRuleContext<TemplateContextTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginningBulletContext beginningBullet() {
			return GetRuleContext<BeginningBulletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public TemplateContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentsContext templateContents() {
		TemplateContentsContext _localctx = new TemplateContentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_templateContents);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULLET) {
				{
				State = 102; beginningBullet();
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 105; subtemplateSection();
				}
				break;
			case 2:
				{
				State = 106; bullet();
				}
				break;
			case 3:
				{
				State = 107; templateToken();
				}
				break;
			case 4:
				{
				State = 108; templateContextCommaToken();
				}
				break;
			case 5:
				{
				State = 109; templateContextToken();
				}
				break;
			case 6:
				{
				State = 111;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 110; text();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 113;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BulletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(TextTemplateParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULLET() { return GetToken(TextTemplateParser.BULLET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACES() { return GetToken(TextTemplateParser.SPACES, 0); }
		public BulletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bullet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBullet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBullet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBullet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BulletContext bullet() {
		BulletContext _localctx = new BulletContext(Context, State);
		EnterRule(_localctx, 10, RULE_bullet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(NL);
			State = 118; Match(BULLET);
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 119; Match(SPACES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginningBulletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULLET() { return GetToken(TextTemplateParser.BULLET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACES() { return GetToken(TextTemplateParser.SPACES, 0); }
		public BeginningBulletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginningBullet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBeginningBullet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBeginningBullet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginningBullet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginningBulletContext beginningBullet() {
		BeginningBulletContext _localctx = new BeginningBulletContext(Context, State);
		EnterRule(_localctx, 12, RULE_beginningBullet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(BULLET);
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 123; Match(SPACES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TextTemplateParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(TextTemplateParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACES() { return GetToken(TextTemplateParser.SPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContinuationContext continuation() {
			return GetRuleContext<ContinuationContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 14, RULE_text);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; Match(TEXT);
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(NL);
				}
				break;
			case SPACES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; Match(SPACES);
				}
				break;
			case CONTINUATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; continuation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUATION() { return GetToken(TextTemplateParser.CONTINUATION, 0); }
		public ContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterContinuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitContinuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinuationContext continuation() {
		ContinuationContext _localctx = new ContinuationContext(Context, State);
		EnterRule(_localctx, 16, RULE_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(CONTINUATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(TextTemplateParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracedOptionsContext bracedOptions() {
			return GetRuleContext<BracedOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(TextTemplateParser.RBRACE, 0); }
		public TemplateTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateTokenContext templateToken() {
		TemplateTokenContext _localctx = new TemplateTokenContext(Context, State);
		EnterRule(_localctx, 18, RULE_templateToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(LBRACE);
			State = 135; bracedOptions();
			State = 136; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracedOptionsContext : ParserRuleContext {
		public BracedOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedOptions; } }
	 
		public BracedOptionsContext() { }
		public virtual void CopyFrom(BracedOptionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BraceArrowContext : BracedOptionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracedArrowContext bracedArrow() {
			return GetRuleContext<BracedArrowContext>(0);
		}
		public BraceArrowContext(BracedOptionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBraceArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBraceArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceArrow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracedPredicateContext : BracedOptionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression() {
			return GetRuleContext<PredicateExpressionContext>(0);
		}
		public BracedPredicateContext(BracedOptionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBracedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBracedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BraceThinArrowContext : BracedOptionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracedThinArrowContext bracedThinArrow() {
			return GetRuleContext<BracedThinArrowContext>(0);
		}
		public BraceThinArrowContext(BracedOptionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBraceThinArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBraceThinArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceThinArrow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracedContext : BracedOptionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked() {
			return GetRuleContext<OptionallyInvokedContext>(0);
		}
		public BracedContext(BracedOptionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBraced(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBraced(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedOptionsContext bracedOptions() {
		BracedOptionsContext _localctx = new BracedOptionsContext(Context, State);
		EnterRule(_localctx, 20, RULE_bracedOptions);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new BraceArrowContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; bracedArrow();
				}
				break;
			case 2:
				_localctx = new BraceThinArrowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; bracedThinArrow();
				}
				break;
			case 3:
				_localctx = new BracedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; optionallyInvoked();
				}
				break;
			case 4:
				_localctx = new BracedPredicateContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 141; predicateExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodableContext methodable() {
			return GetRuleContext<MethodableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		public MethodInvokedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvoked; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterMethodInvoked(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitMethodInvoked(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvoked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokedContext methodInvoked() {
		MethodInvokedContext _localctx = new MethodInvokedContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodInvoked);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; methodable();
			State = 146;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 145; methodInvocation();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateExpressionContext : ParserRuleContext {
		public PredicateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateExpression; } }
	 
		public PredicateExpressionContext() { }
		public virtual void CopyFrom(PredicateExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionContext : PredicateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokedContext methodInvoked() {
			return GetRuleContext<MethodInvokedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedSubtemplateContext namedSubtemplate() {
			return GetRuleContext<NamedSubtemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierConditionContext identifierCondition() {
			return GetRuleContext<IdentifierConditionContext>(0);
		}
		public ConditionContext(PredicateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalOperationContext : PredicateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperandContext[] relationalOperand() {
			return GetRuleContexts<RelationalOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperandContext relationalOperand(int i) {
			return GetRuleContext<RelationalOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONAL() { return GetToken(TextTemplateParser.RELATIONAL, 0); }
		public RelationalOperationContext(PredicateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterRelationalOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitRelationalOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOperatorContext : PredicateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext[] predicateExpression() {
			return GetRuleContexts<PredicateExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression(int i) {
			return GetRuleContext<PredicateExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TextTemplateParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TextTemplateParser.OR, 0); }
		public LogicalOperatorContext(PredicateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedPredicateContext : PredicateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(TextTemplateParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression() {
			return GetRuleContext<PredicateExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(TextTemplateParser.RP, 0); }
		public NestedPredicateContext(PredicateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterNestedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitNestedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotPredicateContext : PredicateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TextTemplateParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression() {
			return GetRuleContext<PredicateExpressionContext>(0);
		}
		public NotPredicateContext(PredicateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterNotPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitNotPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateExpressionContext predicateExpression() {
		return predicateExpression(0);
	}

	private PredicateExpressionContext predicateExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateExpressionContext _localctx = new PredicateExpressionContext(Context, _parentState);
		PredicateExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_predicateExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new NestedPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 151; Match(LP);
				State = 152; predicateExpression(0);
				State = 153; Match(RP);
				}
				break;
			case 2:
				{
				_localctx = new RelationalOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155; relationalOperand();
				State = 156; Match(RELATIONAL);
				State = 157; relationalOperand();
				}
				break;
			case 3:
				{
				_localctx = new NotPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159; Match(NOT);
				State = 160; predicateExpression(3);
				}
				break;
			case 4:
				{
				_localctx = new ConditionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 161; methodInvoked();
					}
					break;
				case 2:
					{
					State = 162; namedSubtemplate();
					}
					break;
				case 3:
					{
					State = 163; identifierCondition();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOperatorContext(new PredicateExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_predicateExpression);
					State = 168;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 169;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 170; predicateExpression(3);
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked() {
			return GetRuleContext<OptionallyInvokedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuoteOperandContext quoteOperand() {
			return GetRuleContext<QuoteOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ApostropheOperandContext apostropheOperand() {
			return GetRuleContext<ApostropheOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedSubtemplateContext namedSubtemplate() {
			return GetRuleContext<NamedSubtemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOperandContext identifierOperand() {
			return GetRuleContext<IdentifierOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitsContext digits() {
			return GetRuleContext<DigitsContext>(0);
		}
		public RelationalOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterRelationalOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitRelationalOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperandContext relationalOperand() {
		RelationalOperandContext _localctx = new RelationalOperandContext(Context, State);
		EnterRule(_localctx, 26, RULE_relationalOperand);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; optionallyInvoked();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; quoteOperand();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; apostropheOperand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179; namedSubtemplate();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180; identifierOperand();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 181; digits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS() { return GetToken(TextTemplateParser.DIGITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(TextTemplateParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(TextTemplateParser.MINUS, i);
		}
		public DigitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterDigits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitDigits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitsContext digits() {
		DigitsContext _localctx = new DigitsContext(Context, State);
		EnterRule(_localctx, 28, RULE_digits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MINUS) {
				{
				{
				State = 184; Match(MINUS);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190; Match(DIGITS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuoteOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(TextTemplateParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(TextTemplateParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TextTemplateParser.TEXT, 0); }
		public QuoteOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quoteOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterQuoteOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitQuoteOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoteOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuoteOperandContext quoteOperand() {
		QuoteOperandContext _localctx = new QuoteOperandContext(Context, State);
		EnterRule(_localctx, 30, RULE_quoteOperand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(QUOTE);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEXT) {
				{
				State = 193; Match(TEXT);
				}
			}

			State = 196; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApostropheOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] APOSTROPHE() { return GetTokens(TextTemplateParser.APOSTROPHE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPHE(int i) {
			return GetToken(TextTemplateParser.APOSTROPHE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TextTemplateParser.TEXT, 0); }
		public ApostropheOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apostropheOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterApostropheOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitApostropheOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApostropheOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApostropheOperandContext apostropheOperand() {
		ApostropheOperandContext _localctx = new ApostropheOperandContext(Context, State);
		EnterRule(_localctx, 32, RULE_apostropheOperand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(APOSTROPHE);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEXT) {
				{
				State = 199; Match(TEXT);
				}
			}

			State = 202; Match(APOSTROPHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TextTemplateParser.IDENTIFIER, 0); }
		public IdentifierOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOperandContext identifierOperand() {
		IdentifierOperandContext _localctx = new IdentifierOperandContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifierOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(TextTemplateParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TextTemplateParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TextTemplateParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TextTemplateParser.DOT, i);
		}
		public IdentifierConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterIdentifierCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitIdentifierCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierConditionContext identifierCondition() {
		IdentifierConditionContext _localctx = new IdentifierConditionContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifierCondition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(IDENTIFIER);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 207; Match(DOT);
					State = 208; Match(IDENTIFIER);
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContextCommaTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(TextTemplateParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContextTokenContext contextToken() {
			return GetRuleContext<ContextTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TextTemplateParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked() {
			return GetRuleContext<OptionallyInvokedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(TextTemplateParser.RBRACE, 0); }
		public TemplateContextCommaTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContextCommaToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateContextCommaToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateContextCommaToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContextCommaToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContextCommaTokenContext templateContextCommaToken() {
		TemplateContextCommaTokenContext _localctx = new TemplateContextCommaTokenContext(Context, State);
		EnterRule(_localctx, 38, RULE_templateContextCommaToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(LBRACE);
			State = 215; contextToken();
			State = 216; Match(COMMA);
			State = 217; optionallyInvoked();
			State = 218; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContextTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(TextTemplateParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContextTokenContext contextToken() {
			return GetRuleContext<ContextTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(TextTemplateParser.RBRACE, 0); }
		public TemplateContextTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContextToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateContextToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateContextToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContextToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContextTokenContext templateContextToken() {
		TemplateContextTokenContext _localctx = new TemplateContextTokenContext(Context, State);
		EnterRule(_localctx, 40, RULE_templateContextToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(LBRACE);
			State = 221; contextToken();
			State = 222; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TextTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedSubtemplateContext[] namedSubtemplate() {
			return GetRuleContexts<NamedSubtemplateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedSubtemplateContext namedSubtemplate(int i) {
			return GetRuleContext<NamedSubtemplateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext[] optionallyInvoked() {
			return GetRuleContexts<OptionallyInvokedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked(int i) {
			return GetRuleContext<OptionallyInvokedContext>(i);
		}
		public ContextTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterContextToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitContextToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextTokenContext contextToken() {
		ContextTokenContext _localctx = new ContextTokenContext(Context, State);
		EnterRule(_localctx, 42, RULE_contextToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
			case IDENTIFIER:
			case LBRACKET:
			case POUND:
			case QUOTE:
			case APOSTROPHE:
				{
				State = 226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 224; namedSubtemplate();
					}
					break;
				case 2:
					{
					State = 225; optionallyInvoked();
					}
					break;
				}
				State = 228; Match(COLON);
				}
				break;
			case COLON:
				{
				State = 230; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 233; namedSubtemplate();
				}
				break;
			case 2:
				{
				State = 234; optionallyInvoked();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedSubtemplateContext namedSubtemplate() {
			return GetRuleContext<NamedSubtemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracketedTemplateSpecContext bracketedTemplateSpec() {
			return GetRuleContext<BracketedTemplateSpecContext>(0);
		}
		public TemplateSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSpecContext templateSpec() {
		TemplateSpecContext _localctx = new TemplateSpecContext(Context, State);
		EnterRule(_localctx, 44, RULE_templateSpec);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case POUND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; namedSubtemplate();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; bracketedTemplateSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedTemplateSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TextTemplateParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TextTemplateParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentsContext[] templateContents() {
			return GetRuleContexts<TemplateContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentsContext templateContents(int i) {
			return GetRuleContext<TemplateContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtemplateSectionContext subtemplateSection() {
			return GetRuleContext<SubtemplateSectionContext>(0);
		}
		public BracketedTemplateSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedTemplateSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBracketedTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBracketedTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedTemplateSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedTemplateSpecContext bracketedTemplateSpec() {
		BracketedTemplateSpecContext _localctx = new BracketedTemplateSpecContext(Context, State);
		EnterRule(_localctx, 46, RULE_bracketedTemplateSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(LBRACKET);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 242; templateContents();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBTEMPLATES) {
				{
				State = 248; subtemplateSection();
				}
			}

			State = 251; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokedTemplateSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TextTemplateParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKETLP() { return GetToken(TextTemplateParser.RBRACKETLP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BeginningBulletContext beginningBullet() {
			return GetRuleContext<BeginningBulletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentsContext[] templateContents() {
			return GetRuleContexts<TemplateContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentsContext templateContents(int i) {
			return GetRuleContext<TemplateContentsContext>(i);
		}
		public InvokedTemplateSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokedTemplateSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterInvokedTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitInvokedTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokedTemplateSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokedTemplateSpecContext invokedTemplateSpec() {
		InvokedTemplateSpecContext _localctx = new InvokedTemplateSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_invokedTemplateSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(LBRACKET);
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 254; beginningBullet();
				}
				break;
			}
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUATION) | (1L << BULLET) | (1L << TEXT) | (1L << LBRACE) | (1L << SPACES) | (1L << NL) | (1L << SUBTEMPLATES))) != 0)) {
				{
				{
				State = 257; templateContents();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 263; Match(RBRACKETLP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracedArrowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression() {
			return GetRuleContext<PredicateExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TextTemplateParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracedArrowTemplateSpecContext bracedArrowTemplateSpec() {
			return GetRuleContext<BracedArrowTemplateSpecContext>(0);
		}
		public BracedArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedArrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBracedArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBracedArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedArrowContext bracedArrow() {
		BracedArrowContext _localctx = new BracedArrowContext(Context, State);
		EnterRule(_localctx, 50, RULE_bracedArrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; predicateExpression(0);
			State = 266; Match(ARROW);
			State = 267; bracedArrowTemplateSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracedThinArrowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression() {
			return GetRuleContext<PredicateExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THINARROW() { return GetToken(TextTemplateParser.THINARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked() {
			return GetRuleContext<OptionallyInvokedContext>(0);
		}
		public BracedThinArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedThinArrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBracedThinArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBracedThinArrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedThinArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedThinArrowContext bracedThinArrow() {
		BracedThinArrowContext _localctx = new BracedThinArrowContext(Context, State);
		EnterRule(_localctx, 52, RULE_bracedThinArrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; predicateExpression(0);
			State = 270; Match(THINARROW);
			State = 271; optionallyInvoked();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracedArrowTemplateSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext[] optionallyInvoked() {
			return GetRuleContexts<OptionallyInvokedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked(int i) {
			return GetRuleContext<OptionallyInvokedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TextTemplateParser.COMMA, 0); }
		public BracedArrowTemplateSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedArrowTemplateSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterBracedArrowTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitBracedArrowTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedArrowTemplateSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedArrowTemplateSpecContext bracedArrowTemplateSpec() {
		BracedArrowTemplateSpecContext _localctx = new BracedArrowTemplateSpecContext(Context, State);
		EnterRule(_localctx, 54, RULE_bracedArrowTemplateSpec);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273; optionallyInvoked();
				State = 274; Match(COMMA);
				State = 275; optionallyInvoked();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; optionallyInvoked();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodableContext : ParserRuleContext {
		public MethodableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodable; } }
	 
		public MethodableContext() { }
		public virtual void CopyFrom(MethodableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierContext : MethodableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(TextTemplateParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TextTemplateParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TextTemplateParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TextTemplateParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TextTemplateParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TextTemplateParser.DOT, i);
		}
		public IdentifierContext(MethodableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ApostropheLiteralContext : MethodableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] APOSTROPHE() { return GetTokens(TextTemplateParser.APOSTROPHE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPHE(int i) {
			return GetToken(TextTemplateParser.APOSTROPHE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TextTemplateParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TextTemplateParser.TEXT, i);
		}
		public ApostropheLiteralContext(MethodableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterApostropheLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitApostropheLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApostropheLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodableTemplateSpecContext : MethodableContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateSpecContext templateSpec() {
			return GetRuleContext<TemplateSpecContext>(0);
		}
		public MethodableTemplateSpecContext(MethodableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterMethodableTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitMethodableTemplateSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodableTemplateSpec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuoteLiteralContext : MethodableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(TextTemplateParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(TextTemplateParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TextTemplateParser.TEXT, 0); }
		public QuoteLiteralContext(MethodableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterQuoteLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitQuoteLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoteLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodableContext methodable() {
		MethodableContext _localctx = new MethodableContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodable);
		int _la;
		try {
			int _alt;
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTE:
				_localctx = new QuoteLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; Match(QUOTE);
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEXT) {
					{
					State = 281; Match(TEXT);
					}
				}

				State = 284; Match(QUOTE);
				}
				break;
			case APOSTROPHE:
				_localctx = new ApostropheLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; Match(APOSTROPHE);
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TEXT) {
					{
					{
					State = 286; Match(TEXT);
					}
					}
					State = 291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 292; Match(APOSTROPHE);
				}
				break;
			case LBRACKET:
			case POUND:
				_localctx = new MethodableTemplateSpecContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 293; templateSpec();
				}
				break;
			case TEXT:
			case IDENTIFIER:
				_localctx = new IdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 294;
				_la = TokenStream.LA(1);
				if ( !(_la==TEXT || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 295; Match(DOT);
						State = 296;
						_la = TokenStream.LA(1);
						if ( !(_la==TEXT || _la==IDENTIFIER) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 301;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(TextTemplateParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TextTemplateParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvokedTemplateSpecContext invokedTemplateSpec() {
			return GetRuleContext<InvokedTemplateSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case METHODNAME:
				{
				State = 304; method();
				}
				break;
			case DOT:
				{
				State = 305; Match(DOT);
				State = 306; invokedTemplateSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << IDENTIFIER) | (1L << LP) | (1L << LBRACKET) | (1L << NOT) | (1L << POUND) | (1L << MINUS) | (1L << DIGITS) | (1L << REGEX) | (1L << QUOTE) | (1L << APOSTROPHE))) != 0)) {
				{
				{
				State = 309; arguments();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHODNAME() { return GetToken(TextTemplateParser.METHODNAME, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 60, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(METHODNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TextTemplateParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TextTemplateParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 62, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; argument();
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 320; Match(COMMA);
				State = 321; argument();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionallyInvokedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokedContext methodInvoked() {
			return GetRuleContext<MethodInvokedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodableContext methodable() {
			return GetRuleContext<MethodableContext>(0);
		}
		public OptionallyInvokedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionallyInvoked; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterOptionallyInvoked(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitOptionallyInvoked(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionallyInvoked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionallyInvokedContext optionallyInvoked() {
		OptionallyInvokedContext _localctx = new OptionallyInvokedContext(Context, State);
		EnterRule(_localctx, 64, RULE_optionallyInvoked);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 327; methodInvoked();
				}
				break;
			case 2:
				{
				State = 328; methodable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegexContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEX() { return GetToken(TextTemplateParser.REGEX, 0); }
		public RegexContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DigitsArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public DigitsContext digits() {
			return GetRuleContext<DigitsContext>(0);
		}
		public DigitsArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterDigitsArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitDigitsArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigitsArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateExpressionContext predicateExpression() {
			return GetRuleContext<PredicateExpressionContext>(0);
		}
		public PredicateArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterPredicateArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitPredicateArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionallyInvokedArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyInvokedContext optionallyInvoked() {
			return GetRuleContext<OptionallyInvokedContext>(0);
		}
		public OptionallyInvokedArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterOptionallyInvokedArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitOptionallyInvokedArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionallyInvokedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 66, RULE_argument);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new RegexContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 331; Match(REGEX);
				}
				break;
			case 2:
				_localctx = new OptionallyInvokedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; optionallyInvoked();
				}
				break;
			case 3:
				_localctx = new PredicateArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 333; predicateExpression(0);
				}
				break;
			case 4:
				_localctx = new DigitsArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 334; digits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedSubtemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(TextTemplateParser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TextTemplateParser.IDENTIFIER, 0); }
		public NamedSubtemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedSubtemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.EnterNamedSubtemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITextTemplateParserListener typedListener = listener as ITextTemplateParserListener;
			if (typedListener != null) typedListener.ExitNamedSubtemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextTemplateParserVisitor<TResult> typedVisitor = visitor as ITextTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedSubtemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedSubtemplateContext namedSubtemplate() {
		NamedSubtemplateContext _localctx = new NamedSubtemplateContext(Context, State);
		EnterRule(_localctx, 68, RULE_namedSubtemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(POUND);
			State = 338; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return predicateExpression_sempred((PredicateExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool predicateExpression_sempred(PredicateExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x157', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x5', '\x2', 'J', 
		'\n', '\x2', '\x3', '\x2', '\x6', '\x2', 'M', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'N', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', 'U', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'X', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\a', '\x4', ']', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '`', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x64', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'g', '\v', 
		'\x5', '\x3', '\x6', '\x5', '\x6', 'j', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', 
		'\x6', 'r', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 's', '\x5', '\x6', 
		'v', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'{', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x7F', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x85', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x91', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x6', 
		'\r', '\x95', '\n', '\r', '\r', '\r', '\xE', '\r', '\x96', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xA7', '\n', 
		'\xE', '\x5', '\xE', '\xA9', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\xAE', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\xB1', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xB9', '\n', '\xF', 
		'\x3', '\x10', '\a', '\x10', '\xBC', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xBF', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\xC5', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xCB', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xD4', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\xD7', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xE5', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xEA', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xEE', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xF2', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\xF6', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xF9', '\v', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\xFC', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x102', '\n', '\x1A', 
		'\x3', '\x1A', '\a', '\x1A', '\x105', '\n', '\x1A', '\f', '\x1A', '\xE', 
		'\x1A', '\x108', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x119', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x11D', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x122', '\n', '\x1E', '\f', 
		'\x1E', '\xE', '\x1E', '\x125', '\v', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x12C', '\n', 
		'\x1E', '\f', '\x1E', '\xE', '\x1E', '\x12F', '\v', '\x1E', '\x5', '\x1E', 
		'\x131', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x136', '\n', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x139', '\n', 
		'\x1F', '\f', '\x1F', '\xE', '\x1F', '\x13C', '\v', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\a', '!', '\x145', '\n', '!', '\f', '!', '\xE', '!', '\x148', '\v', 
		'!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x14C', '\n', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x152', '\n', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', '\x3', '\x1A', 
		'%', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', '\x2', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\x4', 
		'\x2', '\b', '\b', '\xF', '\xF', '\x2', '\x16D', '\x2', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'R', '\x3', '\x2', '\x2', '\x2', '\x6', '^', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x61', '\x3', '\x2', '\x2', '\x2', '\n', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'w', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x86', '\x3', '\x2', '\x2', '\x2', '\x14', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x90', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xC2', '\x3', '\x2', '\x2', '\x2', '\"', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xCE', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '(', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xDE', '\x3', '\x2', '\x2', '\x2', ',', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x10F', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x118', '\x3', '\x2', '\x2', '\x2', ':', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x13F', '\x3', '\x2', '\x2', '\x2', '@', '\x141', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x44', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'H', 'J', '\x5', '\xE', '\b', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
		'K', 'M', '\x5', '\n', '\x6', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '\x2', '\x2', '\x3', 'Q', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'V', '\a', '\f', '\x2', '\x2', 'S', 'U', '\x5', '\x10', '\t', 
		'\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\x6', '\x4', '\x2', 'Z', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '[', ']', '\x5', '\b', '\x5', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\a', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x65', '\x5', '*', '\x16', '\x2', '\x62', '\x64', '\x5', '\x10', '\t', 
		'\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x5', '\xE', 
		'\b', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'u', '\x3', '\x2', '\x2', '\x2', 'k', 'v', '\x5', '\x4', 
		'\x3', '\x2', 'l', 'v', '\x5', '\f', '\a', '\x2', 'm', 'v', '\x5', '\x14', 
		'\v', '\x2', 'n', 'v', '\x5', '(', '\x15', '\x2', 'o', 'v', '\x5', '*', 
		'\x16', '\x2', 'p', 'r', '\x5', '\x10', '\t', '\x2', 'q', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'k', '\x3', '\x2', '\x2', '\x2', 'u', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'm', '\x3', '\x2', '\x2', '\x2', 'u', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'o', '\x3', '\x2', '\x2', '\x2', 'u', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'v', '\v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', 
		'\a', '\v', '\x2', '\x2', 'x', 'z', '\a', '\a', '\x2', '\x2', 'y', '{', 
		'\a', '\n', '\x2', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', 
		'\x3', '\x2', '\x2', '\x2', '{', '\r', '\x3', '\x2', '\x2', '\x2', '|', 
		'~', '\a', '\a', '\x2', '\x2', '}', '\x7F', '\a', '\n', '\x2', '\x2', 
		'~', '}', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\xF', '\x3', '\x2', '\x2', '\x2', '\x80', '\x85', '\a', 
		'\b', '\x2', '\x2', '\x81', '\x85', '\a', '\v', '\x2', '\x2', '\x82', 
		'\x85', '\a', '\n', '\x2', '\x2', '\x83', '\x85', '\x5', '\x12', '\n', 
		'\x2', '\x84', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\a', '\x6', '\x2', '\x2', '\x87', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\t', '\x2', '\x2', '\x89', 
		'\x8A', '\x5', '\x16', '\f', '\x2', '\x8A', '\x8B', '\a', '\x15', '\x2', 
		'\x2', '\x8B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x91', '\x5', 
		'\x34', '\x1B', '\x2', '\x8D', '\x91', '\x5', '\x36', '\x1C', '\x2', '\x8E', 
		'\x91', '\x5', '\x42', '\"', '\x2', '\x8F', '\x91', '\x5', '\x1A', '\xE', 
		'\x2', '\x90', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x94', '\x5', ':', '\x1E', '\x2', '\x93', '\x95', '\x5', 
		'<', '\x1F', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\b', '\xE', '\x1', '\x2', '\x99', 
		'\x9A', '\a', '\x17', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\x1A', '\xE', 
		'\x2', '\x9B', '\x9C', '\a', '%', '\x2', '\x2', '\x9C', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x1C', '\xF', '\x2', '\x9E', 
		'\x9F', '\a', '\x13', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x1C', '\xF', 
		'\x2', '\xA0', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', 
		'\x1C', '\x2', '\x2', '\xA2', '\xA9', '\x5', '\x1A', '\xE', '\x5', '\xA3', 
		'\xA7', '\x5', '\x18', '\r', '\x2', '\xA4', '\xA7', '\x5', '\x46', '$', 
		'\x2', '\xA5', '\xA7', '\x5', '&', '\x14', '\x2', '\xA6', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\x98', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\f', '\x4', '\x2', '\x2', '\xAB', '\xAC', '\t', 
		'\x2', '\x2', '\x2', '\xAC', '\xAE', '\x5', '\x1A', '\xE', '\x5', '\xAD', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB9', '\x5', '\x42', '\"', 
		'\x2', '\xB3', '\xB9', '\x5', ' ', '\x11', '\x2', '\xB4', '\xB9', '\x5', 
		'\"', '\x12', '\x2', '\xB5', '\xB9', '\x5', '\x46', '$', '\x2', '\xB6', 
		'\xB9', '\x5', '$', '\x13', '\x2', '\xB7', '\xB9', '\x5', '\x1E', '\x10', 
		'\x2', '\xB8', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBC', '\a', '\x1E', '\x2', '\x2', '\xBB', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x1F', '\x2', 
		'\x2', '\xC1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\a', 
		'&', '\x2', '\x2', '\xC3', '\xC5', '\a', '\b', '\x2', '\x2', '\xC4', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', '&', 
		'\x2', '\x2', '\xC7', '!', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', 
		'\a', '\'', '\x2', '\x2', '\xC9', '\xCB', '\a', '\b', '\x2', '\x2', '\xCA', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', 
		'\'', '\x2', '\x2', '\xCD', '#', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', 
		'\a', '\xF', '\x2', '\x2', '\xCF', '%', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD5', '\a', '\xF', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x11', '\x2', 
		'\x2', '\xD2', '\xD4', '\a', '\xF', '\x2', '\x2', '\xD3', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\'', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\t', '\x2', '\x2', '\xD9', 
		'\xDA', '\x5', ',', '\x17', '\x2', '\xDA', '\xDB', '\a', '(', '\x2', '\x2', 
		'\xDB', '\xDC', '\x5', '\x42', '\"', '\x2', '\xDC', '\xDD', '\a', '\x15', 
		'\x2', '\x2', '\xDD', ')', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\a', '\t', '\x2', '\x2', '\xDF', '\xE0', '\x5', ',', '\x17', '\x2', '\xE0', 
		'\xE1', '\a', '\x15', '\x2', '\x2', '\xE1', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE5', '\x5', '\x46', '$', '\x2', '\xE3', '\xE5', '\x5', 
		'\x42', '\"', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE7', '\a', '\x18', '\x2', '\x2', '\xE7', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xEA', '\a', '\x18', '\x2', '\x2', '\xE9', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x5', 
		'\x46', '$', '\x2', '\xEC', '\xEE', '\x5', '\x42', '\"', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '-', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', '\x5', 
		'\x46', '$', '\x2', '\xF0', '\xF2', '\x5', '\x30', '\x19', '\x2', '\xF1', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '/', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF7', '\a', 
		'\x19', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\n', '\x6', '\x2', '\xF5', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\x5', '\x4', '\x3', 
		'\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\a', '\x30', '\x2', '\x2', '\xFE', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x101', '\a', '\x19', '\x2', '\x2', '\x100', '\x102', 
		'\x5', '\xE', '\b', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x105', '\x5', '\n', '\x6', '\x2', '\x104', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'/', '\x2', '\x2', '\x10A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\x5', '\x1A', '\xE', '\x2', '\x10C', '\x10D', '\a', '\x12', 
		'\x2', '\x2', '\x10D', '\x10E', '\x5', '\x38', '\x1D', '\x2', '\x10E', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x5', '\x1A', '\xE', 
		'\x2', '\x110', '\x111', '\a', '\x14', '\x2', '\x2', '\x111', '\x112', 
		'\x5', '\x42', '\"', '\x2', '\x112', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x114', '\x5', '\x42', '\"', '\x2', '\x114', '\x115', '\a', 
		'(', '\x2', '\x2', '\x115', '\x116', '\x5', '\x42', '\"', '\x2', '\x116', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x119', '\x5', '\x42', 
		'\"', '\x2', '\x118', '\x113', '\x3', '\x2', '\x2', '\x2', '\x118', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11C', '\a', '&', '\x2', '\x2', '\x11B', '\x11D', '\a', '\b', 
		'\x2', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x131', '\a', '&', '\x2', '\x2', '\x11F', '\x123', '\a', '\'', 
		'\x2', '\x2', '\x120', '\x122', '\a', '\b', '\x2', '\x2', '\x121', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x126', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x131', '\a', '\'', '\x2', 
		'\x2', '\x127', '\x131', '\x5', '.', '\x18', '\x2', '\x128', '\x12D', 
		'\t', '\x3', '\x2', '\x2', '\x129', '\x12A', '\a', '\x11', '\x2', '\x2', 
		'\x12A', '\x12C', '\t', '\x3', '\x2', '\x2', '\x12B', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x131', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x130', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x128', '\x3', '\x2', '\x2', '\x2', '\x131', 
		';', '\x3', '\x2', '\x2', '\x2', '\x132', '\x136', '\x5', '>', ' ', '\x2', 
		'\x133', '\x134', '\a', '\x11', '\x2', '\x2', '\x134', '\x136', '\x5', 
		'\x32', '\x1A', '\x2', '\x135', '\x132', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x139', '\x5', '@', '!', '\x2', '\x138', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '%', '\x2', '\x2', 
		'\x13E', '=', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\a', '\x10', 
		'\x2', '\x2', '\x140', '?', '\x3', '\x2', '\x2', '\x2', '\x141', '\x146', 
		'\x5', '\x44', '#', '\x2', '\x142', '\x143', '\a', '(', '\x2', '\x2', 
		'\x143', '\x145', '\x5', '\x44', '#', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x148', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x41', '\x3', '\x2', '\x2', '\x2', '\x148', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x5', '\x18', '\r', '\x2', 
		'\x14A', '\x14C', '\x5', ':', '\x1E', '\x2', '\x14B', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x152', '\a', '\"', '\x2', 
		'\x2', '\x14E', '\x152', '\x5', '\x42', '\"', '\x2', '\x14F', '\x152', 
		'\x5', '\x1A', '\xE', '\x2', '\x150', '\x152', '\x5', '\x1E', '\x10', 
		'\x2', '\x151', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x1D', '\x2', '\x2', '\x154', 
		'\x155', '\a', '\xF', '\x2', '\x2', '\x155', 'G', '\x3', '\x2', '\x2', 
		'\x2', ')', 'I', 'N', 'V', '^', '\x65', 'i', 's', 'u', 'z', '~', '\x84', 
		'\x90', '\x96', '\xA6', '\xA8', '\xAF', '\xB8', '\xBD', '\xC4', '\xCA', 
		'\xD5', '\xE4', '\xE9', '\xED', '\xF1', '\xF7', '\xFB', '\x101', '\x106', 
		'\x118', '\x11C', '\x123', '\x12D', '\x130', '\x135', '\x13A', '\x146', 
		'\x14B', '\x151',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
